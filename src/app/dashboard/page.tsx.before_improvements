// src/app/dashboard/page.tsx - Complete Improved Dashboard
'use client';

import { useState } from 'react';
import { 
  Building, 
  Users, 
  TrendingUp, 
  Bell, 
  Search, 
  Plus,
  Shield,
  Star,
  MessageCircle,
  BarChart3,
  UserPlus,
  ArrowRight,
  CheckCircle,
  Clock,
  MapPin,
  Globe,
  Mail,
  Phone,
  Calendar,
  Target,
  Award,
  Activity
} from 'lucide-react';

// Enhanced mock data
const mockBusinessProfile = {
  business_id: 'bus_123',
  name: 'Tech Solutions Ltd',
  description: 'Innovative software solutions for European SMEs',
  industry: 'Technology',
  size: 'small',
  country: 'France',
  city: 'Paris',
  website: 'https://techsolutions.fr',
  email: 'contact@techsolutions.fr',
  phone: '+33 1 23 45 67 89',
  verification_status: 'verified',
  trust_score: 85,
  founded: '2020',
  employees: '25-50'
};

const mockConnections = [
  {
    connection_id: 'conn_1',
    business: { 
      name: 'Digital Marketing Pro', 
      industry: 'Marketing', 
      city: 'Lyon', 
      country: 'France',
      trust_score: 92,
      employees: '10-25',
      logo: 'DM'
    },
    connection_type: 'partner',
    status: 'accepted',
    established_date: '2024-01-15',
    last_interaction: '2024-05-20'
  },
  {
    connection_id: 'conn_2', 
    business: { 
      name: 'Supply Chain Italia', 
      industry: 'Logistics', 
      city: 'Milan', 
      country: 'Italy',
      trust_score: 88,
      employees: '50-100',
      logo: 'SC'
    },
    connection_type: 'supplier',
    status: 'accepted',
    established_date: '2024-02-03',
    last_interaction: '2024-05-18'
  },
  {
    connection_id: 'conn_3',
    business: { 
      name: 'UK Manufacturing Ltd', 
      industry: 'Manufacturing', 
      city: 'Manchester', 
      country: 'UK',
      trust_score: 90,
      employees: '100+',
      logo: 'UM'
    },
    connection_type: 'customer',
    status: 'accepted',
    established_date: '2024-02-20',
    last_interaction: '2024-05-19'
  }
];

const mockConnectionRequests = [
  {
    requester: { 
      name: 'Green Energy Solutions', 
      industry: 'Energy', 
      city: 'Barcelona', 
      country: 'Spain',
      trust_score: 87,
      employees: '25-50',
      logo: 'GE'
    },
    connection_type: 'partner',
    message: 'We\'d like to explore partnership opportunities in renewable energy tech.',
    requested_date: '2024-05-18'
  },
  {
    requester: { 
      name: 'French Retail Chain', 
      industry: 'Retail', 
      city: 'Nice', 
      country: 'France',
      trust_score: 83,
      employees: '100+',
      logo: 'FR'
    },
    connection_type: 'customer',
    message: 'Interested in your e-commerce solutions for our retail network.',
    requested_date: '2024-05-17'
  }
];

const mockBusinessSuggestions = [
  {
    name: 'AI Innovations GmbH',
    industry: 'Technology',
    city: 'Berlin',
    country: 'Germany',
    trust_score: 94,
    employees: '50-100',
    match_reason: 'Similar industry, high trust score, AI expertise',
    connection_type: 'partner',
    logo: 'AI'
  },
  {
    name: 'Mediterranean Logistics',
    industry: 'Logistics', 
    city: 'Rome',
    country: 'Italy',
    trust_score: 89,
    employees: '25-50',
    match_reason: 'Complementary services, good location match',
    connection_type: 'supplier',
    logo: 'ML'
  },
  {
    name: 'Nordic Software House',
    industry: 'Technology',
    city: 'Stockholm',
    country: 'Sweden',
    trust_score: 91,
    employees: '10-25',
    match_reason: 'Similar size, complementary expertise',
    connection_type: 'partner',
    logo: 'NS'
  }
];

const mockReviews = [
  {
    reviewer: 'Digital Marketing Pro',
    reviewer_logo: 'DM',
    rating: 5,
    review_text: 'Excellent collaboration on our e-commerce platform. Highly reliable and delivered on time.',
    review_type: 'collaboration',
    created_at: '2024-02-28'
  },
  {
    reviewer: 'Supply Chain Italia',
    reviewer_logo: 'SC',
    rating: 4,
    review_text: 'Good technical expertise and responsive communication. Would recommend.',
    review_type: 'reliability', 
    created_at: '2024-02-15'
  },
  {
    reviewer: 'UK Manufacturing Ltd',
    reviewer_logo: 'UM',
    rating: 5,
    review_text: 'Outstanding software solution that improved our production efficiency by 30%.',
    review_type: 'general',
    created_at: '2024-03-10'
  }
];

const recentActivities = [
  {
    type: 'connection',
    title: 'New connection with Digital Marketing Pro',
    time: '2 hours ago',
    icon: Users,
    color: 'bg-green-500'
  },
  {
    type: 'review',
    title: 'Received 5-star review from UK Manufacturing Ltd',
    time: '1 day ago',
    icon: Star,
    color: 'bg-blue-500'
  },
  {
    type: 'request',
    title: 'Connection request from Green Energy Solutions',
    time: '2 days ago',
    icon: UserPlus,
    color: 'bg-yellow-500'
  },
  {
    type: 'profile',
    title: 'Profile verification completed',
    time: '3 days ago',
    icon: CheckCircle,
    color: 'bg-purple-500'
  },
  {
    type: 'match',
    title: 'New business match: AI Innovations GmbH',
    time: '4 days ago',
    icon: Target,
    color: 'bg-indigo-500'
  }
];

export default function Dashboard() {
  const [activeTab, setActiveTab] = useState('overview');

  const StatCard = ({ icon: Icon, title, value, color, subtitle, trend }: any) => (
    <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-shadow">
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <div className={`p-3 rounded-lg ${color}`}>
            <Icon className="h-6 w-6 text-white" />
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-gray-600">{title}</p>
            <p className="text-2xl font-bold text-gray-900">{value}</p>
            {subtitle && <p className="text-sm text-gray-500">{subtitle}</p>}
          </div>
        </div>
        {trend && (
          <div className="text-right">
            <TrendingUp className="h-5 w-5 text-green-500 mb-1" />
            <p className="text-xs text-green-600 font-medium">{trend}</p>
          </div>
        )}
      </div>
    </div>
  );

  const BusinessCard = ({ business, type, onConnect, showActions = false }: any) => (
    <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-100 hover:shadow-xl transition-all">
      <div className="flex items-start justify-between mb-4">
        <div className="flex items-start">
          <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center text-white font-bold text-lg">
            {business.logo || business.name.substring(0, 2)}
          </div>
          <div className="ml-4">
            <h3 className="text-lg font-semibold text-gray-900">{business.name}</h3>
            <p className="text-sm text-gray-600">{business.industry}</p>
            <div className="flex items-center mt-1 text-sm text-gray-500">
              <MapPin className="h-4 w-4 mr-1" />
              {business.city}, {business.country}
            </div>
            {business.employees && (
              <p className="text-xs text-gray-500 mt-1">{business.employees} employees</p>
            )}
          </div>
        </div>
        <div className="text-right">
          <div className="flex items-center">
            <Star className="h-4 w-4 text-yellow-500 mr-1" />
            <span className="font-semibold text-gray-900">{business.trust_score}</span>
          </div>
          <span className="text-xs text-gray-500">Trust Score</span>
        </div>
      </div>
      
      {business.match_reason && (
        <div className="bg-blue-50 rounded-lg p-3 mb-4">
          <p className="text-sm text-blue-700">{business.match_reason}</p>
        </div>
      )}
      
      <div className="flex justify-between items-center">
        <span className={`px-3 py-1 rounded-full text-xs font-medium ${
          type === 'partner' ? 'bg-purple-100 text-purple-800' :
          type === 'supplier' ? 'bg-green-100 text-green-800' :
          type === 'customer' ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'
        }`}>
          {type?.charAt(0).toUpperCase() + type?.slice(1)}
        </span>
        
        {onConnect && (
          <button 
            onClick={() => onConnect(business)}
            className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors"
          >
            <UserPlus className="h-4 w-4 mr-1" />
            Connect
          </button>
        )}
        
        {showActions && (
          <div className="flex space-x-2">
            <button className="p-2 text-gray-600 hover:text-blue-600 transition-colors">
              <MessageCircle className="h-4 w-4" />
            </button>
            <button className="p-2 text-gray-600 hover:text-blue-600 transition-colors">
              <Mail className="h-4 w-4" />
            </button>
          </div>
        )}
      </div>
    </div>
  );

  const NetworkVisualization = () => (
    <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-lg font-semibold text-gray-900">Network Overview</h3>
        <button className="text-blue-600 hover:text-blue-700 text-sm font-medium flex items-center">
          View Full Network
          <ArrowRight className="h-4 w-4 ml-1" />
        </button>
      </div>
      
      {/* Interactive Network Visualization */}
      <div className="relative h-80 bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg overflow-hidden">
        {/* Central node (Your business) */}
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          <div className="w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center text-white font-bold text-lg shadow-lg">
            TS
          </div>
          <div className="text-center mt-2">
            <p className="text-sm font-medium text-gray-900">Your Business</p>
          </div>
        </div>
        
        {/* Connected nodes */}
        {[
          { x: '25%', y: '25%', name: 'Digital Marketing', type: 'partner', color: 'bg-purple-500', initials: 'DM' },
          { x: '75%', y: '25%', name: 'Supply Chain IT', type: 'supplier', color: 'bg-green-500', initials: 'SC' },
          { x: '25%', y: '75%', name: 'UK Manufacturing', type: 'customer', color: 'bg-orange-500', initials: 'UM' },
          { x: '75%', y: '75%', name: 'AI Innovations', type: 'prospect', color: 'bg-gray-400', initials: 'AI' }
        ].map((node, index) => (
          <div key={index} className="absolute" style={{ top: node.y, left: node.x, transform: 'translate(-50%, -50%)' }}>
            {/* Connection line */}
            <svg className="absolute top-1/2 left-1/2 w-32 h-32 pointer-events-none" style={{ 
              transform: 'translate(-50%, -50%)',
              zIndex: 0
            }}>
              <line 
                x1="64" y1="64" 
                x2={index === 0 ? "96" : index === 1 ? "32" : index === 2 ? "96" : "32"} 
                y2={index === 0 ? "96" : index === 1 ? "96" : index === 2 ? "32" : "32"}
                stroke="#e2e8f0" 
                strokeWidth="2"
                strokeDasharray={node.type === 'prospect' ? "5,5" : "0"}
              />
            </svg>
            
            {/* Node */}
            <div className={`w-12 h-12 ${node.color} rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg relative z-10`}>
              {node.initials}
            </div>
            <div className="text-center mt-1">
              <p className="text-xs font-medium text-gray-700">{node.name}</p>
              <p className="text-xs text-gray-500">{node.type}</p>
            </div>
          </div>
        ))}
        
        {/* Network stats */}
        <div className="absolute bottom-4 left-4 bg-white/90 backdrop-blur-sm rounded-lg p-3">
          <div className="flex items-center space-x-4 text-sm">
            <div className="flex items-center">
              <div className="w-3 h-3 bg-blue-600 rounded-full mr-1"></div>
              <span className="text-gray-700">Your Business</span>
            </div>
            <div className="flex items-center">
              <div className="w-3 h-3 bg-green-500 rounded-full mr-1"></div>
              <span className="text-gray-700">Active ({mockConnections.length})</span>
            </div>
            <div className="flex items-center">
              <div className="w-3 h-3 bg-gray-400 rounded-full mr-1"></div>
              <span className="text-gray-700">Prospects (5)</span>
            </div>
          </div>
        </div>
      </div>
      
      {/* Quick stats */}
      <div className="mt-6 grid grid-cols-3 gap-4">
        <div className="text-center">
          <div className="text-2xl font-bold text-blue-600">{mockConnections.length}</div>
          <div className="text-sm text-gray-600">Active Connections</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-green-600">85%</div>
          <div className="text-sm text-gray-600">Trust Score</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-purple-600">12</div>
          <div className="text-sm text-gray-600">Industries</div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center">
              <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                <Building className="h-5 w-5 text-white" />
              </div>
              <span className="ml-3 text-xl font-bold text-gray-900">Nebula</span>
              <span className="ml-2 text-sm text-gray-500 font-medium">Business Network</span>
            </div>
            
            {/* Search Bar */}
            <div className="flex-1 max-w-md mx-8">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                <input
                  type="text"
                  placeholder="Search businesses, industries..."
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-50"
                />
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <button className="relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors">
                <Bell className="h-5 w-5" />
                <span className="absolute -top-1 -right-1 h-4 w-4 bg-red-500 rounded-full text-xs text-white flex items-center justify-center">
                  3
                </span>
              </button>
              <div className="flex items-center">
                <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                  <span className="text-white text-sm font-medium">TS</span>
                </div>
                <span className="ml-2 text-gray-700 font-medium">Tech Solutions Ltd</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Navigation Tabs */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="flex space-x-8">
            {[
              { id: 'overview', label: 'Overview', icon: BarChart3 },
              { id: 'connections', label: 'My Network', icon: Users },
              { id: 'discover', label: 'Discover', icon: Search },
              { id: 'requests', label: 'Requests', icon: UserPlus, badge: mockConnectionRequests.length },
              { id: 'reviews', label: 'Reviews', icon: Star }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center px-3 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                <tab.icon className="h-4 w-4 mr-2" />
                {tab.label}
                {tab.badge && (
                  <span className="ml-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                    {tab.badge}
                  </span>
                )}
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          
          {/* Overview Tab */}
          {activeTab === 'overview' && (
            <div className="space-y-8">
              {/* Business Profile Summary */}
              <div className="bg-white rounded-xl shadow-lg p-8 border border-gray-100">
                <div className="flex justify-between items-start">
                  <div className="flex items-start">
                    <div className="w-16 h-16 bg-gradient-to-br from-blue-600 to-purple-600 rounded-xl flex items-center justify-center text-white font-bold text-xl">
                      TS
                    </div>
                    <div className="ml-6">
                      <div className="flex items-center">
                        <h1 className="text-3xl font-bold text-gray-900">{mockBusinessProfile.name}</h1>
                        {mockBusinessProfile.verification_status === 'verified' && (
                          <CheckCircle className="ml-3 h-7 w-7 text-green-500" />
                        )}
                      </div>
                      <p className="text-gray-600 mt-2 text-lg">{mockBusinessProfile.description}</p>
                      <div className="flex items-center mt-4 space-x-6 text-sm text-gray-500">
                        <div className="flex items-center">
                          <Building className="h-4 w-4 mr-1" />
                          {mockBusinessProfile.industry}
                        </div>
                        <div className="flex items-center">
                          <MapPin className="h-4 w-4 mr-1" />
                          {mockBusinessProfile.city}, {mockBusinessProfile.country}
                        </div>
                        <div className="flex items-center">
                          <Users className="h-4 w-4 mr-1" />
                          {mockBusinessProfile.employees} employees
                        </div>
                        <div className="flex items-center">
                          <Globe className="h-4 w-4 mr-1" />
                          <a href={mockBusinessProfile.website} className="text-blue-600 hover:underline">
                            Website
                          </a>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="flex items-center justify-end">
                      <Shield className="h-6 w-6 text-green-500 mr-2" />
                      <span className="text-3xl font-bold text-green-600">{mockBusinessProfile.trust_score}</span>
                    </div>
                    <p className="text-sm text-gray-500 mt-1">Trust Score</p>
                    <div className="mt-3">
                      <Award className="h-5 w-5 text-yellow-500 mx-auto" />
                      <p className="text-xs text-yellow-600 mt-1">Verified Business</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Stats Grid */}
              <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
                <StatCard
                  icon={Users}
                  title="Active Connections"
                  value={mockConnections.length}
                  color="bg-blue-500"
                  subtitle="3 new this month"
                  trend="+12%"
                />
                <StatCard
                  icon={UserPlus}
                  title="Pending Requests"
                  value={mockConnectionRequests.length}
                  color="bg-orange-500"
                  subtitle="Awaiting response"
                />
                <StatCard
                  icon={Star}
                  title="Average Rating"
                  value="4.7"
                  color="bg-yellow-500"
                  subtitle={`From ${mockReviews.length} reviews`}
                  trend="+0.2"
                />
                <StatCard
                  icon={TrendingUp}
                  title="Profile Views"
                  value="147"
                  color="bg-green-500"
                  subtitle="This week"
                  trend="+23%"
                />
              </div>

              {/* Network Visualization */}
              <NetworkVisualization />

              {/* Recent Activity */}
              <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold text-gray-900 flex items-center">
                    <Activity className="h-5 w-5 mr-2 text-blue-600" />
                    Recent Activity
                  </h3>
                  <button className="text-blue-600 hover:text-blue-700 text-sm font-medium">
                    View All
                  </button>
                </div>
                <div className="space-y-4">
                  {recentActivities.map((activity, index) => (
                    <div key={index} className="flex items-start space-x-4 p-3 hover:bg-gray-50 rounded-lg transition-colors">
                      <div className={`w-10 h-10 ${activity.color} rounded-full flex items-center justify-center`}>
                        <activity.icon className="h-5 w-5 text-white" />
                      </div>
                      <div className="flex-1">
                        <p className="text-sm font-medium text-gray-900">{activity.title}</p>
                        <p className="text-xs text-gray-500 flex items-center mt-1">
                          <Clock className="h-3 w-3 mr-1" />
                          {activity.time}
                        </p>
                      </div>
                      <ArrowRight className="h-4 w-4 text-gray-400" />
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Connections Tab */}
          {activeTab === 'connections' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">My Network</h2>
                <div className="flex space-x-3">
                  <select className="border border-gray-300 rounded-lg px-3 py-2 text-sm bg-white">
                    <option>All Types</option>
                    <option>Partners</option>
                    <option>Suppliers</option>
                    <option>Customers</option>
                  </select>
                  <button className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                    <Plus className="h-4 w-4 mr-2" />
                    Find Connections
                  </button>
                </div>
              </div>
              
              <div className="grid grid-cols-1 gap-6 lg:grid-cols-2 xl:grid-cols-3">
                {mockConnections.map(connection => (
                  <BusinessCard
                    key={connection.connection_id}
                    business={connection.business}
                    type={connection.connection_type}
                    showActions={true}
                  />
                ))}
              </div>
            </div>
          )}

          {/* Discover Tab */}
          {activeTab === 'discover' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">Discover Businesses</h2>
                <div className="flex space-x-3">
                  <select className="border border-gray-300 rounded-lg px-3 py-2 text-sm bg-white">
                    <option>All Industries</option>
                    <option>Technology</option>
                    <option>Manufacturing</option>
                    <option>Energy</option>
                    <option>Logistics</option>
                  </select>
                  <select className="border border-gray-300 rounded-lg px-3 py-2 text-sm bg-white">
                    <option>All Countries</option>
                    <option>France</option>
                    <option>Italy</option>
                    <option>Germany</option>
                    <option>UK</option>
                  </select>
                  <button className="flex items-center px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                    <Target className="h-4 w-4 mr-2" />
                    AI Match
                  </button>
                </div>
              </div>
              
              <div className="grid grid-cols-1 gap-6 lg:grid-cols-2 xl:grid-cols-3">
                {mockBusinessSuggestions.map((business, index) => (
                  <BusinessCard
                    key={index}
                    business={business}
                    type={business.connection_type}
                    onConnect={(business: any) => console.log('Connect to:', business.name)}
                  />
                ))}
              </div>
            </div>
          )}

          {/* Requests Tab */}
          {activeTab === 'requests' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">Connection Requests</h2>
                <div className="text-sm text-gray-500">
                  {mockConnectionRequests.length} pending requests
                </div>
              </div>
              
              <div className="space-y-4">
                {mockConnectionRequests.map((request, index) => (
                  <div key={index} className="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
                    <div className="flex justify-between items-start">
                      <div className="flex items-start flex-1">
                        <div className="w-12 h-12 bg-gradient-to-br from-green-500 to-blue-600 rounded-lg flex items-center justify-center text-white font-bold text-lg">
                          {request.requester.logo}
                        </div>
                        <div className="ml-4 flex-1">
                          <div className="flex items-center">
                            <h3 className="text-lg font-semibold text-gray-900">{request.requester.name}</h3>
                            <span className={`ml-3 px-3 py-1 rounded-full text-xs font-medium ${
                              request.connection_type === 'partner' ? 'bg-purple-100 text-purple-800' :
                              request.connection_type === 'supplier' ? 'bg-green-100 text-green-800' :
                              'bg-blue-100 text-blue-800'
                            }`}>
                              {request.connection_type}
                            </span>
                          </div>
                          <div className="flex items-center mt-1 text-sm text-gray-600">
                            <span>{request.requester.industry}</span>
                            <span className="mx-2">•</span>
                            <MapPin className="h-4 w-4 mr-1" />
                            <span>{request.requester.city}, {request.requester.country}</span>
                            <span className="mx-2">•</span>
                            <Users className="h-4 w-4 mr-1" />
                            <span>{request.requester.employees}</span>
                          </div>
                          <p className="text-gray-700 mt-3 bg-gray-50 p-3 rounded-lg">{request.message}</p>
                          <div className="flex items-center mt-3 space-x-4">
                            <div className="flex items-center">
                              <Star className="h-4 w-4 text-yellow-500 mr-1" />
                              <span className="text-sm font-medium">{request.requester.trust_score}</span>
                              <span className="text-sm text-gray-500 ml-1">Trust Score</span>
                            </div>
                            <div className="flex items-center text-sm text-gray-500">
                              <Calendar className="h-4 w-4 mr-1" />
                              Requested {new Date(request.requested_date).toLocaleDateString()}
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="flex space-x-3 ml-6">
                        <button className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors font-medium">
                          Accept
                        </button>
                        <button className="px-6 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors font-medium">
                          Decline
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Reviews Tab */}
          {activeTab === 'reviews' && (
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-bold text-gray-900">Reviews & Ratings</h2>
                <div className="text-right">
                  <div className="flex items-center justify-end">
                    <Star className="h-6 w-6 text-yellow-500 mr-2" />
                    <span className="text-2xl font-bold">4.7</span>
                  </div>
                  <p className="text-sm text-gray-500">Average rating from {mockReviews.length} reviews</p>
                </div>
              </div>
              
              <div className="space-y-4">
                {mockReviews.map((review, index) => (
                  <div key={index} className="bg-white rounded-xl shadow-lg p-6 border border-gray-100">
                    <div className="flex justify-between items-start mb-4">
                      <div className="flex items-start">
                        <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center text-white font-bold text-sm">
                          {review.reviewer_logo}
                        </div>
                        <div className="ml-3">
                          <h4 className="font-semibold text-gray-900">{review.reviewer}</h4>
                          <div className="flex items-center mt-1">
                            {[...Array(5)].map((_, i) => (
                              <Star
                                key={i}
                                className={`h-4 w-4 ${
                                  i < review.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'
                                }`}
                              />
                            ))}
                            <span className="ml-2 text-sm text-gray-500">
                              {new Date(review.created_at).toLocaleDateString()}
                            </span>
                          </div>
                        </div>
                      </div>
                      <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-xs font-medium">
                        {review.review_type}
                      </span>
                    </div>
                    <p className="text-gray-700 leading-relaxed">{review.review_text}</p>
                  </div>
                ))}
              </div>
            </div>
          )}

        </div>
      </main>
    </div>
  );
}
